// Minimal runner to execute extracted kirilloid functions for wind/weather parity
// This file is generated by the assistant to test kirilloid's minified core.

const fs = require('fs');

// Re-implement Yj (from minified snapshot)
class Yj {
  constructor(t) { this.state = this.init(t); }
  init(e) {
    const t = e >>> 0;
    const r = Math.imul(t, 1812433253) + 1 >>> 0;
    const i = Math.imul(r, 1812433253) + 1 >>> 0;
    const a = Math.imul(i, 1812433253) + 1 >>> 0;
    this.state = { a: t, b: r, c: i, d: a };
    return this.state;
  }
  next() {
    const e = this.state.a ^ this.state.a << 11;
    this.state.a = this.state.b;
    this.state.b = this.state.c;
    this.state.c = this.state.d;
    this.state.d = this.state.d ^ this.state.d >>> 19 ^ e ^ e >>> 8;
    return this.state.d;
  }
  getState() { return this.state; }
  setState(e) { this.state = e; }
  random() { return (this.next() << 9 >>> 0) / 4294966784; }
  rangeFloat(e,t) { return t - this.random() * (t - e); }
  rangeInt(e,t) { return e + (this.next() >>> 0) % (t - e); }
  insideUnitCircle() {
    const e = this.rangeFloat(0, 2 * Math.PI);
    const t = Math.sqrt(this.rangeFloat(0, 1));
    return { x: Math.cos(e) * t, y: Math.sin(e) * t };
  }
}

// Constants copied/derived from our project
const g = {
  q: 125, // WIND_PERIOD
  p: 666, // WEATHER_PERIOD
  h: 1800, // GAME_DAY
  j: 'Clear',
};

// nm and om copied from kirilloid snapshot (weather metadata and per-biome options)
const nm = {
  Clear: { emoji: "\u2600\ufe0f", wind: [.1, .6], light: [1, 1.7], flags: 2 },
  Twilight_Clear: { emoji: "\u2600\ufe0f", wind: [.2, .6], light: [.3, .5], flags: 3 },
  Misty: { emoji: "\ud83c\udf2b\ufe0f", wind: [.1, .3], light: [1, 1], flags: 2 },
  Darklands_dark: { emoji: "\u2601\ufe0f", wind: [.1, .6], light: [0, 1], flags: 35 },
  Heath_clear: { emoji: "\u2600\ufe0f", wind: [.4, .8], light: [1, 1.5], flags: 2 },
  DeepForest_Mist: { emoji: "\u2600\ufe0f", wind: [.1, .6], light: [1.2, 1.5], flags: 2 },
  GDKing: { emoji: "\ud83d\udfe3", wind: [.1, .3], light: [1.4, 1.5], flags: 2 },
  Rain: { emoji: "\ud83c\udf27\ufe0f", wind: [.5, 1], light: [.5, .77], flags: 50 },
  LightRain: { emoji: "\ud83c\udf26\ufe0f", wind: [.1, .6], light: [.8, .9], flags: 50 },
  ThunderStorm: { emoji: "\u26c8\ufe0f", wind: [.8, 1], light: [.5, .77], flags: 50 },
  Eikthyr: { emoji: "\ud83d\udfe3", wind: [.9, 1], light: [.5, .77], flags: 34 },
  GoblinKing: { emoji: "\ud83d\udfe3", wind: [.5, .7], light: [.6, 1], flags: 32 },
  nofogts: { emoji: "", wind: [1, 1], light: [.5, .77], flags: 50 },
  SwampRain: { emoji: "\ud83c\udf27\ufe0f", wind: [.1, .3], light: [.5, .6], flags: 18 },
  Bonemass: { emoji: "\ud83d\udfe3", wind: [.1, .3], light: [.4, .6], flags: 18 },
  Snow: { emoji: "\ud83c\udf28\ufe0f", wind: [.1, .6], light: [.4, 1.2], flags: 12 },
  Twilight_Snow: { emoji: "\ud83c\udf28\ufe0f", wind: [.3, .6], light: [.5, .5], flags: 3 },
  Twilight_SnowStorm: { emoji: "\u2744\ufe0f", wind: [.7, 1], light: [.4, .4], flags: 14 },
  SnowStorm: { emoji: "\u2744\ufe0f", wind: [.8, 1], light: [.2, .7], flags: 14 },
  Moder: { emoji: "\ud83d\udfe3", wind: [1, 1], light: [.5, .7], flags: 14 },
  Mistlands_clear: { emoji: "\u2600\ufe0f", wind: [.05, .2], light: [.5, 1.2], flags: 2 },
  Mistlands_rain: { emoji: "\ud83c\udf27\ufe0f", wind: [.05, .2], light: [.5, .7], flags: 50 },
  Mistlands_thunder: { emoji: "\u26c8\ufe0f", wind: [.5, 1], light: [.5, .8], flags: 50 },
  Queen: { emoji: "\ud83d\udfe3", wind: [1, 1], light: [.6, .6], flags: 32 },
  Ashlands_ashrain: { emoji: "\u2614", wind: [.1, .5], light: [.4, 1.6], flags: 0 },
  Ashlands_storm: { emoji: "\u26c8\ufe0f", wind: [.8, 1], light: [.4, .8], flags: 0 },
  Ashlands_meteorshower: { emoji: "", wind: [.1, .5], light: [1, 1.2], flags: 0 },
  Ashlands_misty: { emoji: "\ud83c\udf2b\ufe0f", wind: [.1, .5], light: [.6, 1], flags: 0 },
  Ashlands_CinderRain: { emoji: "\u2614", wind: [.75, .7], light: [.8, 1.3], flags: 0 },
  Ashlands_SeaStorm: { emoji: "\u26c8\ufe0f", wind: [.8, 1], light: [.5, .77], flags: 32 },
  Crypt: { emoji: "\u2b1b", wind: [0, 0], light: [0, 0], flags: 32 },
  SunkenCrypt: { emoji: "\u2b1b", wind: [0, 0], light: [0, 0], flags: 32 },
  Caves: { emoji: "\u2b1b", wind: [0, 0], light: [.1, .1], flags: 44 },
  InfectedMine: { emoji: "\u2b1b", wind: [0, 0], light: [.1, .1], flags: 32 }
};

const om = {
  Meadows: [["Clear",25],["Rain",1],["Misty",1],["ThunderStorm",1],["LightRain",1]],
  BlackForest: [["DeepForest_Mist",20],["Rain",1],["Misty",1],["ThunderStorm",1]],
  Swamp: [["SwampRain",1]],
  Mountain: [["SnowStorm",1],["Snow",5]],
  DeepNorth: [["Twilight_SnowStorm",1],["Twilight_Snow",2],["Twilight_Clear",1]],
  Plains: [["Heath_clear",5],["Misty",1],["LightRain",1]],
  Ashlands: [["Ashlands_ashrain",30],["Ashlands_misty",2],["Ashlands_CinderRain",4],["Ashlands_storm",1]],
  Mistlands: [["Mistlands_clear",15],["Mistlands_rain",1],["Mistlands_thunder",1]],
  Ocean: [["Rain",1],["LightRain",1],["Misty",1],["Clear",10],["ThunderStorm",1]]
};

// rg order used by snapshot (match om key order)
const rg = ["Meadows","BlackForest","Swamp","Mountain","DeepNorth","Plains","Ashlands","Mistlands","Ocean"];

// Extracted ag/ng/og functions approximated from the snapshot
function ag(e, t, r, ig) {
  var i = Math.floor(e / (8 * g.q / t));
  ig.init(i);
  r.angle += 2 * ig.random() * Math.PI / t;
  r.intensity += (ig.random() - .5) / t;
}

function ng(e, ig) {
  var t = { angle: 0, intensity: .5 };
  ag(e, 1, t, ig);
  ag(e, 2, t, ig);
  ag(e, 4, t, ig);
  ag(e, 8, t, ig);
  t.intensity = Math.max(0, Math.min(1, t.intensity));
  t.angle = 180 * t.angle / Math.PI % 360;
  return t;
}

function og(weatherSeed, ig) {
  // weatherSeed corresponds to Math.floor((windTime) / WEATHER_PERIOD)
  if (weatherSeed < g.i / g.p) return rg.map(() => g.j);
  ig.init(weatherSeed);
  var t = ig.rangeFloat(0, 1);
  return rg.map(function(biome) {
    var list = om[biome];
    var total = list.reduce((s,x) => s + x[1], 0) * t;
    var acc = 0;
    for (var i=0;i<list.length;i++) {
      acc += list[i][1];
      if (total < acc) return list[i][0];
    }
    return list.at(-1)[0];
  });
}

// Runner
function runSample(day, hour) {
  const gameDay = day - 1;
  const startTime = gameDay * g.h;
  const gameTime = startTime + hour * (g.h / 24);
  const windTick = Math.floor(gameTime / g.q);
  const ig = new Yj(0);
  // mirror snapshot behavior: g.i is total time horizon; set small so og runs for day 1
  g.i = g.h * 2;
  const w = ng(windTick * g.q, ig);
  const weatherSeed = Math.floor((windTick * g.q) / g.p);
  const weathers = og(weatherSeed, ig);
  // compute BF intensity (BlackForest is index 1 in rg)
  const bfKey = weathers[1];
  if (!nm[bfKey]) {
    console.error('Unknown weather key for BF:', bfKey, 'weathers:', weathers);
    return { day, hour, gameTime, windTick, angle: Math.round(w.angle), intensity: Math.round(w.intensity*100), bf: bfKey, bfIntensity: null };
  }
  const bfWindRange = nm[bfKey].wind;
  const bfIntensity = Math.round((bfWindRange[0] + (bfWindRange[1]-bfWindRange[0]) * w.intensity) * 100);
  return { day, hour, gameTime, windTick, angle: Math.round(w.angle), intensity: Math.round(w.intensity*100), bf: bfKey, bfIntensity };
}

if (require.main === module) {
  console.log('Running kirilloid core sample for Day 1');
  [11,13].forEach(h => console.log(runSample(1,h)));
}

module.exports = { Yj, ng, og };
